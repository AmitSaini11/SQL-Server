create database W3school
use W3school
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY,
    CustomerName VARCHAR(100),
    ContactName VARCHAR(100),
    Address VARCHAR(200),
    City VARCHAR(50),
    PostalCode VARCHAR(10),
    Country VARCHAR(50)
);
select *from Customers
---- Insert Records -----
INSERT INTO Customers (CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES 
  (1, 'John Doe', 'Jane Smith', '123 Main Street', 'New York', '10001', 'USA'),
  (2, 'Alice Johnson', 'Bob Johnson', '456 Maple Avenue', 'Los Angeles', '90001', 'USA'),
  (3, 'Michael Brown', 'Emily Green', '789 Oak Road', 'Chicago', '60601', 'USA'),
  (4, 'Sarah Lee', 'David Thompson', '789 Elm Street', 'Houston', '77002', 'USA'),
  (5, 'Thomas Miller', 'Emma Davis', '345 Pine Avenue', 'Miami', '33101', 'USA'),
  (6, 'Olivia Wilson', 'James Anderson', '567 Cedar Lane', 'Seattle', '98101', 'USA'),
  (7, 'Sophia Martinez', 'Alexander Taylor', '901 Oakwood Drive', 'San Francisco', '94101', 'USA'),
  (8, 'William Clark', 'Charlotte Turner', '234 Maple Street', 'Boston', '02101', 'USA'),
  (9, 'Ethan Hill', 'Abigail Brown', '678 Walnut Avenue', 'Dallas', '75201', 'USA'),
  (10, 'Ava Harris', 'Daniel Moore', '432 Birch Lane', 'Phoenix', '85001', 'USA'),
  (11, 'Liam Thompson', 'Olivia Davis', '876 Elmwood Drive', 'Denver', '80201', 'USA'),
  (12, 'Amelia Lewis', 'Mason Adams', '543 Cedar Avenue', 'Atlanta', '30301', 'USA'),
  (13, 'Benjamin Turner', 'Harper Mitchell', '987 Pine Street', 'Philadelphia', '19101', 'USA'),
  (14, 'Mia Wright', 'Logan Turner', '210 Oak Lane', 'San Diego', '92101', 'USA'),
  (15, 'Lucas Walker', 'Sofia Turner', '678 Elmwood Drive', 'Las Vegas', '89101', 'USA');
  INSERT INTO Customers (CustomerID, CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES 
(16, 'Alfreds Futterkiste', 'Maria Anders', 'Obere Str. 57', 'Berlin', '12209', 'Germany'),
(17, 'Ana Trujillo Emparedados y helados', 'Ana Trujillo', 'Avda. de la Constitución 2222', 'México D.F.', '05021', 'Mexico'),
(18, 'Antonio Moreno Taquería', 'Antonio Moreno', 'Mataderos 2312', 'México D.F.', '05023', 'Mexico'),
(19, 'Around the Horn', 'Thomas Hardy', '120 Hanover Sq.', 'London', 'WA1 1DP', 'UK'),
(20, 'Berglunds snabbköp', 'Christina Berglund', 'Berguvsvägen 8', 'Luleå', 'S-958 22', 'Sweden');


-- Some of The Most Important SQL Commands
-- SELECT - extracts data from a database
-- UPDATE - updates data in a database
-- DELETE - deletes data from a database
-- INSERT INTO - inserts new data into a database
-- CREATE DATABASE - creates a new database
-- ALTER DATABASE - modifies a database
-- CREATE TABLE - creates a new table
-- ALTER TABLE - modifies a table
-- DROP TABLE - deletes a table
-- CREATE INDEX - creates an index (search key)
-- DROP INDEX - deletes an index

-- The SQL SELECT DISTINCT Statement
-- The SELECT DISTINCT statement is used to return only distinct (different) values.
-----------------------------------------------------------------------
select distinct CustomerName,Address from Customers
-- count city distinct statement 
select count(distinct city)from customers
------------------------------------------------------------------------------
--- The SQL WHERE Clause
--- The WHERE clause is used to filter records.
---------------------------------------------------------------------
SELECT * FROM Customers
WHERE Country='USA'
--------------------------------------------------------------------------
SELECT * FROM Customers
WHERE CustomerID=1;
---------------------------------------------------
CREATE TABLE Product (
    ProductID INT PRIMARY KEY,
    ProductName VARCHAR(100),
    SupplierID INT,
    CategoryID INT,
    Unit VARCHAR(50),
    Price DECIMAL(10, 2)
);
select *From Product
-- Inserting the first record
INSERT INTO Product (ProductID, ProductName, SupplierID, CategoryID, Unit, Price)
VALUES
(1, 'Laptop', 101, 201, 'Each', 10.99),
(2, 'Smartphone', 102, 202, 'Box', 20.50),
(3, 'T-Shirt', 103, 203, 'Pack', 5.25),
(4, 'Coffee Maker', 104, 204, 'Each', 15.75),
(5, 'Headphones', 105, 205, 'Each', 8.99),
(6, 'Backpack', 106, 206, 'Pack', 12.49),
(7, 'Running Shoes', 107, 207, 'Each', 9.75),
(8, 'Camera', 108, 208, 'Each', 6.99),
(9, 'Watch', 109, 209, 'Box', 24.99),
(10, 'Sunglasses', 110, 210, 'Each', 11.25),
(11, 'Desk Chair', 111, 211, 'Pack', 7.50),
(12, 'Bluetooth Speaker', 112, 212, 'Each', 14.95),
(13, 'Power Bank', 113, 213, 'Box', 18.75),
(14, 'Portable Projector', 114, 214, 'Each', 9.99),
(15, 'Office Desk', 115, 215, 'Each', 5.50);
-----------------------------------------------------------
select * from product where price =15.75 
select * from product where price <>15.75 
select * from product where price between 15.75 and 14.95
SELECT * FROM Customers WHERE City LIKE 's%';
SELECT * FROM Customers WHERE City IN ('New York','Los Angeles');
SELECT * FROM Customers WHERE NOT Country='Germany';
------------------------------------------------------------
--- Operators in The WHERE Clause
Operator	             Description	
=	                     Equal	
>	                     Greater than	
<	                     Less than	
>=	                     Greater than or equal	
<=	                     Less than or equal	
<>	Not equal. Note:     In some versions of SQL this operator may be written as !=	
BETWEEN	Between          a certain range	
----------------------------------------------------------------------------------
The SQL AND, OR, and NOT Operators
The WHERE clause can be combined with AND, OR, and NOT operators.

The AND and OR operators are used to filter records based on more than one condition:

The AND operator displays a record if all the conditions separated by AND are TRUE.
The OR operator displays a record if any of the conditions separated by OR is TRUE.
The NOT operator displays a record if the condition(s) is NOT TRUE.
---------------------------------------------------------------------------------------------------------------
---------------------------------------------------------------------------------------------
--- Combining AND, OR and NOT
SELECT * FROM Customers
WHERE Country='USA' AND (City='New York' OR City='Los Angeles');

SELECT * FROM Customers
WHERE NOT Country='USA' AND NOT Country='USA';
-----------------------------------------------------------------
--- SQL ORDER BY Keyword
--- The ORDER BY keyword is used to sort the result-set in ascending or descending order.
--- The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.
---------------------------------------------------------------
select *from Customers order by city
select *from Customers order by city desc
----Select Multiple column
select * from Customers order by city asc,CustomerName Desc
---------------------------------------------------------------------------------------------------------------------------------------
SQL NULL Value
If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be 
saved with a NULL value.

How to Test for NULL Values?
It is not possible to test for NULL values with comparison operators, such as =, <, or <>.
We will have to use the IS NULL and IS NOT NULL operators instead.
--------------------
--- The IS NULL Operator
--- The IS NULL operator is used to test for empty values (NULL values).
SELECT CustomerName, ContactName, Address FROM Customers
WHERE Address IS NULL;

--- The IS NOT NULL Operator
--- The IS NOT NULL operator is used to test for non-empty values (NOT NULL values).
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;
------------------------------------------------------------------------------------------------------------------------------------
------------------------------------------------------------------------
--- Update Records
UPDATE Customers
SET ContactName = 'Alfred Schmidt', City= 'Frankfurt'
WHERE CustomerID = 1;
------ Multiple Records -----
update Customers 
SET ContactName = 'Alfred Schmidt' where city = 'Frankfurt';
--------------------------------------------------------------------
---- The SQL DELETE Statement 
--- The DELETE statement is used to delete existing records in a table.
Delete Customers where CustomerID =10
delete Customers where CustomerID in(8,9)
select * from Customers
---- Delete All Records------
delete from customers
truncate table customers
-------------------------------------------------------------------------------
--- The SQL SELECT TOP Clause
--- The SELECT TOP clause is used to specify the number of records to return.
--- The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.
---------------------------------
select top(5) * from customers
select top 5 * from  Product
select top 5 * from  product where price >10.99
-----------------------------------------------------------------------------
--- The SQL MIN() and MAX() Functions
--- The MIN() function returns the smallest value of the selected column.
--- The MAX() function returns the largest value of the selected column.
--------------------------------
SELECT MIN(Price) AS SmallestPrice
FROM Product;
SELECT MAX(PRICE)AS largestPrice
FROM Product;
-----------------------------------------------------------------------------
--- The SQL COUNT(), AVG() and SUM() Functions
--- The COUNT() function returns the number of rows that matches a specified criterion.
---------------------- Count
select count(price) As CountPrice
FROM product
---------------------- Avg
select avg(price) AS AvgPrice
FROM product
--------------------- Sum
select sum(price) AS SumPrice
FROM product 
----------------------------------------------------------------------------------------
The SQL LIKE Operator
The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.
There are two wildcards often used in conjunction with the LIKE operator:
The percent sign (%) represents zero, one, or multiple characters
The underscore sign (_) represents one, single character
------------------------
Here are some examples showing different LIKE operators with '%' and '_' wildcards:

LIKE Operator	                  Description
WHERE CustomerName LIKE 'a%'	Finds any values that start with "a"
WHERE CustomerName LIKE '%a'	Finds any values that end with "a"
WHERE CustomerName LIKE '%or%'	Finds any values that have "or" in any position
WHERE CustomerName LIKE '_r%'	Finds any values that have "r" in the second position
WHERE CustomerName LIKE 'a_%'	Finds any values that start with "a" and are at least 2 characters in length
WHERE CustomerName LIKE 'a__%'	Finds any values that start with "a" and are at least 3 characters in length
WHERE ContactName LIKE 'a%o'	Finds any values that start with "a" and ends with "o"
----------------------------
---------------------- Finds any values that start with "a"
select * from Customers
where CustomerName like 'A%';
--------------------- Finds any values that end with "a"
select *from Customers
where CustomerName like '%N'
--------------------- Finds any values that have "or" in any position
select *from Customers
where CustomerName like '%ME%'
---------------------- Finds any values that have "r" in the second position
select *from Customers
where CustomerName like '_l%'
---------------------- Finds any values that start with "a" and are at least 2 characters in length
select *from Customers
where CustomerName like 'a_%'
---------------------- Finds any values that start with "a" and are at least 3 characters in length
select *from Customers
where CustomerName like 'a__%'
--------------------- Finds any values that start with "a" and ends with "o"
select *from Customers
where CustomerName like 'a%s'
-------------------------------------------------------------------------------------------------------------------------------





