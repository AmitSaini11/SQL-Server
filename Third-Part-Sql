/* Not Null example */
CREATE TABLE Users (
  id INT PRIMARY KEY NOT NULL,
  username VARCHAR(50) NOT NULL,
  email VARCHAR(100) NOT NULL
);

INSERT INTO Users (id, username, email) VALUES
(1, 'john_doe', 'john@example.com'),
(2, 'jane_smith', 'jane@example.com'),
(3, 'mike_jones', 'mike@example.com'),
(4, 'sarah_adams', 'sarah@example.com'),
(5, 'chris_wilson', 'chris@example.com');
select *from Users
drop table Products

/* UNIQUE example */
CREATE TABLE Products (
  id INT PRIMARY KEY NOT NULL,
  name VARCHAR(255) CONSTRAINT product_name_constraint UNIQUE
);
/* Check if the table exists */
SELECT * FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_NAME = 'Products';


INSERT INTO Products (id, name) VALUES
(1, 'Product A'),
(2, 'Product B'),
(3, 'Product C'),
(4, 'Product D'),
(5, 'Product E');
select * from Products

 /* PRIMARY KEY example */
CREATE TABLE PK_Orders (
  id INT PRIMARY KEY IDENTITY(1,1),
  customer_id INT NOT NULL,
  order_date DATE NOT NULL
);

INSERT INTO PK_Orders (customer_id, order_date) VALUES
(1, '2024-02-22'),
(2, '2024-02-21'),
(3, '2024-02-20'),
(4, '2024-02-19'),
(5, '2024-02-18');
select *from PK_Orders

/* Foreign key */ 
CREATE TABLE Customers (
  id INT PRIMARY KEY identity(1,1),
  name VARCHAR(255) NOT NULL
);

CREATE TABLE Orders (
  id INT PRIMARY KEY identity(1,1),
  customer_id INT NOT NULL,
  order_date DATE NOT NULL,
  FOREIGN KEY (customer_id) REFERENCES Customers(id)
);

select * from Customers
select * from Orders
INSERT INTO Customers (name) VALUES
('John Doe'),
('Jane Smith'),
('Mike Jones'),
('Sarah Adams'),
('Chris Wilson');

INSERT INTO Orders (customer_id, order_date) VALUES
(1, '2024-02-22'),
(2, '2024-02-21'),
(3, '2024-02-20'),
(4, '2024-02-19'),
(5, '2024-02-18');

/* Check key */
CREATE TABLE Product_check (
  id INT PRIMARY KEY NOT NULL,
  name VARCHAR(255) NOT NULL,
  price DECIMAL(10,2) NOT NULL CHECK (price > 0)
);

INSERT INTO Product_check (id, name, price) VALUES
(1, 'Product A', 10.50),
(2, 'Product B', 20.25),
(3, 'Product C', 15.75),
(4, 'Product D', 8.99),
(5, 'Product E', 12.49);
select * from Product_check

/* Not Null Dropping Constraints  */
/* Find the name of the constraint: */
SELECT name
FROM sys. columns
WHERE object_id = OBJECT_ID('Users') AND name = 'email';
/* Once you know the name of the constraint, you can drop it: */
ALTER TABLE Users
ALTER COLUMN email VARCHAR(100) NULL;

/* Add Constraint */
Alter  table users Alter column email varchar(100) not null;
-- user-defined constraint name 
ALTER TABLE Users
ADD CONSTRAINT not_null_email CHECK (email IS NOT NULL);
-- Drop constraint name
ALTER TABLE users DROP CONSTRAINT not_null_email 


/* UNIQUE Drop Constraints */
ALTER TABLE Products DROP CONSTRAINT UQ__Products__72E12F1BCD57378B;
/* Add Constraint */
Alter Table Products Add Constraint product_name_constraint UNIQUE(name)

/*  Primary key Drop Constraints */
Alter Table Orders Drop Constraint [PK_Orders]
/* Add Constraint */
Alter Table Orders Add Constraint PK_Orders primary key (id)


------------ Identity in my SQL server ----------------------
create table Test (
               ID int identity(1,1),
			   Fname varchar(100));
insert into Test(id,Fname) Values (6,'Ankit');
select *from Test
delete test where id=6
-- manually set value on identity on
set identity_insert Test off
---
DBCC checkIdent(Test,RESEED,10)

CREATE TABLE Users_test (
  id INT  PRIMARY KEY identity(1,1),
  name VARCHAR(255)
);

INSERT INTO Users_test (name) VALUES ('John Doe');
--- equivalent to the last values
SELECT scope_identity() AS last_order_id;
---equivalent to the last values 
select IDENT_CURRENT('Test');


Temporary Table in Sql server
Types of Temporary Tables in SQL Server
Local Temporary Tables
Global Temporary Tables

what is a Temporary Table in the Sql server explain with example.

In SQL Server, a temporary table is a special type of table that exists temporarily within a specific database session or transaction. It's designed to store data needed for a short duration and doesn't require permanent storage.
- Temporary tables are tables that exit temporarily on the SQL Server.
- Temporary tables are stored in tempdb.
- They work like a regular table in that you can perform the oppressions "Select, Insert, and Delete " as for a regular table.
- IF created inside a stored procedure they are destroyed upon completion of the stored procedure.

Creation:

Use the CREATE TABLE with the TEMPORARY or TEMP keyword before the table name.
Example: CREATE TEMPORARY TABLE temp_data (id INT, name VARCHAR(50))

Scope:

It exists only for the current session or transaction.
Automatically dropped when the session ends or transaction commits/rolls back.
Can be explicitly dropped with DROP TABLE before the end of their scope.

3. Types:

Local Temporary Tables: These are only accessible within the current session. Their names are prefixed with a single pound sign (#). More secure but limited functionalities.
Global Temporary Tables: These are accessible to all sessions and are dropped when the last session referencing them ends. Their names are prefixed with a double pound sign (##). More powerful but less secure.

4. Usage:

Store intermediate results for complex calculations.
Filter and manipulate subsets of data within a query or set of queries.
Stage data for bulk operations.

5. Limitations:

Cannot be indexed or have triggers associated (except global temporary tables).
Cannot be used in views or certain DDL statements.

Example:-

select * from [dbo].[Users]
-- Select TEMP local  exiting 

select * into #localTemp from [dbo].[Users]
select *From #localTemp
select Email from #localTemp where id=1

---- create a temporary table using a local
create table #localTemp2 (
     ID int primary key identity(1,1),
	 Name varchar(20))
---- insert into values temporary table
insert into #localTemp2 values('Ankit')
select *from #localTemp2

----------------------------------------------------------------------
Global Table

---- create a temporary table using Global
create table ##GloballocalTemp (
     ID int primary key identity(1,1),
	 Name varchar(20))
	 
---- insert into values temporary table
insert into ##GloballocalTemp values('Ankit')
select *from ##GloballocalTemp
