SQL Error Handling:-

An error condition during a program execution is called an exception and mechanism for resolving such an exception is know as an exception handler.
SQL Server provides Try,Catch blocks for excepting handling.
We can put all T-SQL statements into a try block and the code for exception handling can be put into a catch block.
We can also generate user-defined errors using a throw block.

Error Functions:-

ERROR_NUMBER() return the number of the error.
ERROR_SEVERITY() return the severity.
ERROR_STATE() return the error state number.
ERROR_PROCEDURE() return the name of the stored procedure or trigger where the error occurred.
ERROR_LINE() returns the line number inside the routime that caused the error.
ERROR_MESSAGE() return the complete text of the error message. The text includes the values supplied for any substitutable paramaetrss,such as lengths,object names or times.

Error Logging:

Logging errors to a table or file is another common error handling technique. You can create an error log table in your database and insert error information into it whenever an error occurs. 
This allows you to track errors over time, analyze patterns, and troubleshoot issues more effectively.

Example:-

CREATE TABLE ErrorLog (
    ErrorID INT IDENTITY(1,1) PRIMARY KEY,
    ErrorDateTime DATETIME,
    ErrorMessage NVARCHAR(MAX),
    ErrorNumber INT,
    ErrorState INT,
    ErrorSeverity INT
);

-- Insert error information into the ErrorLog table
INSERT INTO ErrorLog (ErrorDateTime, ErrorMessage, ErrorNumber, ErrorState, ErrorSeverity)
VALUES (GETDATE(), ERROR_MESSAGE(), ERROR_NUMBER(), ERROR_STATE(), ERROR_SEVERITY());



Types of SQL Server Exceptions
1. System Defined
2. User Defined

1. System Defined:- In a System Defined Exception the exceptions(errors) are generated by the system.
2. User Defined:- Thistypes of Exception is user generated,not system generated. 

1.System-Defined Error Handling:

System-defined error handling refers to error handling mechanisms provided by the database management system (DBMS) itself.
These mechanisms typically include predefined error codes and messages that are generated when errors occur during the execution of SQL statements.
System-defined error handling often involves using constructs like TRY...CATCH in SQL Server or EXCEPTION...WHEN in Oracle to catch and handle errors gracefully.

Example:-

Declare @val1 int;
Declare @val2 int;
BEGIN try
  set @val1 =8;
  print 'Line 1';
  print 'Line 2';
  set @val2=@val1/2;
  print 'Line 3';
END Try
Begin Catch
    print 'Inside the catch block'
	print concat('Error_Message()=',Error_Message());
	print concat('Error_Line()=',Error_Line());
	print concat('Error_Number()=',Error_NUMBER());
	print concat('Error_Severity()=',Error_SEVERITY());
	print concat('Error_State()=',Error_STATE());
END CATCH


2. User-Defined Error Handling:

User-defined error handling refers to custom error handling mechanisms implemented by users or developers.
This can include defining custom error codes, messages, and error-handling logic tailored to specific application requirements.
User-defined error handling often involves using stored procedures or functions to encapsulate error-handling logic and provide more granular control over error handling.

Example:- 

Declare @Age int;
BEGIN try
  set @Age =8;
  print 'Line 1';
  print 'Line 2';
  If @Age > 40
    RAISERROR(' Age is Greater than 40',16,3) 
     --THROW 4000,'Age is greater than 40',16;
  print 'Line 3';
END Try
Begin Catch
    print 'Inside the catch block'
	print concat('Error_Message()=',Error_Message());
	print concat('Error_Line()=',Error_Line());
	print concat('Error_Number()=',Error_NUMBER());
	print concat('Error_Severity()=',Error_SEVERITY());
	print concat('Error_State()=',Error_STATE());
END CATCH
